[build-system]
requires = [
    "setuptools>=68",
    "wheel",
    "polib>=1.2",
]
build-backend = "setuptools.build_meta"

[project]
name = "fretsonfire"
dynamic = ["version"]
description = "Frets on Fire is a game of musical skill and fast fingers."
readme = {file = "README.md", content-type = "text/markdown"}
license = "GPL-2.0-or-later"
license-files = ["LICENSE.md"]
requires-python = ">=3.13"
authors = [
    {name = "Sami Kyöstilä", email = "skyostil@touko.unrealvoodoo.org"},
    {name = "Roberto Romero", email = "roberto@nirae.at"},
]
keywords = ["game", "music", "rhythm", "guitar"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: End Users/Desktop",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Topic :: Games/Entertainment",
    "Topic :: Multimedia :: Sound/Audio",
    "Topic :: Multimedia :: Graphics",
]
dependencies = [
    "pygame>=2.1",
    "PyOpenGL>=3.1",
    "numpy>=1.20",
    "Pillow>=9.0",
    "pyasyncore>=1.0",
]

[project.optional-dependencies]
tests = [
    "pytest",
]

[project.scripts]
fretsonfire = "fretsonfire.FretsOnFire:main"

[project.urls]
Homepage = "http://www.unrealvoodoo.org"

[tool.setuptools]
package-dir = {"" = "src"}
include-package-data = true

[tool.setuptools.cmdclass]
build_py = "fretsonfire._build.BuildPyWithTranslations"
sdist = "fretsonfire._build.SDistWithTranslations"

[tool.setuptools.packages.find]
where = ["src"]
include = ["fretsonfire*"]

[tool.setuptools.dynamic]
version = {attr = "fretsonfire.Version.VERSION"}

[tool.briefcase]
project_name = "Frets on Fire"
bundle = "at.nirae"
version = "1.5.5"
url = "https://github.com/sildur/fretsonfire"
license.file = "LICENSE.md"
author = "Roberto Romero"
author_email = "roberto@nirae.at"

[tool.briefcase.app.fretsonfire]
formal_name = "Frets on Fire"
description = "Frets on Fire is a game of musical skill and fast fingers."
long_description = """Frets on Fire is a game of musical skill and fast fingers. The aim of
    the game is to play guitar with the keyboard as accurately as
    possible.
"""
sources = ["src/fretsonfire"]
test_sources = ["tests"]
requires = [
    "pygame>=2.1",
    "PyOpenGL>=3.1",
    "numpy>=1.20",
    "Pillow>=9.0",
    "pyasyncore>=1.0",
]
test_requires = [
    "pytest",
]

[tool.briefcase.app.fretsonfire.macOS]
universal_build = true
requires = ["std-nslog~=1.0.3"]

[tool.briefcase.app.fretsonfire.linux]
requires = []

[tool.briefcase.app.fretsonfire.linux.system.debian]
system_requires = []
system_runtime_requires = []
debian_release = "trixie"

[tool.briefcase.app.fretsonfire.linux.system.rhel]
system_requires = []
system_runtime_requires = []

[tool.briefcase.app.fretsonfire.linux.system.suse]
system_requires = []
system_runtime_requires = []

[tool.briefcase.app.fretsonfire.linux.system.arch]
system_requires = []
system_runtime_requires = []

[tool.briefcase.app.fretsonfire.linux.appimage]
manylinux = "manylinux_2_28"
system_requires = []
linuxdeploy_plugins = []

[tool.briefcase.app.fretsonfire.linux.flatpak]
flatpak_runtime = "org.freedesktop.Platform"
flatpak_runtime_version = "24.08"
flatpak_sdk = "org.freedesktop.Sdk"

[tool.briefcase.app.fretsonfire.windows]
requires = []

[tool.briefcase.app.fretsonfire.iOS]
supported = false

[tool.briefcase.app.fretsonfire.android]
supported = false

[tool.briefcase.app.fretsonfire.web]
supported = false

[tool.semantic_release]
build_command = "python -m pip install --upgrade pip build && python -m build"
version_variables = [
    "src/fretsonfire/Version.py:VERSION",
]
version_toml = [
    "pyproject.toml:tool.briefcase.version",
]
assets = []
build_command_env = []
commit_message = "{version}\n\nAutomatically generated by python-semantic-release"
commit_parser = "conventional"
logging_use_named_masks = false
major_on_zero = true
allow_zero_version = false
no_git_verify = false
tag_format = "v{version}"

[tool.semantic_release.branches.main]
match = "(main|master)"
prerelease_token = "rc"
prerelease = false

[tool.semantic_release.changelog]
exclude_commit_patterns = []
mode = "update"
insertion_flag = "<!-- version list -->"
template_dir = "templates"

[tool.semantic_release.changelog.default_templates]
changelog_file = "CHANGELOG.md"
output_format = "md"
mask_initial_release = true

[tool.semantic_release.changelog.environment]
block_start_string = "{%"
block_end_string = "%}"
variable_start_string = "{{"
variable_end_string = "}}"
comment_start_string = "{#"
comment_end_string = "#}"
trim_blocks = false
lstrip_blocks = false
newline_sequence = "\n"
keep_trailing_newline = false
extensions = []
autoescape = false

[tool.semantic_release.commit_author]
env = "GIT_COMMIT_AUTHOR"
default = "semantic-release <semantic-release>"

[tool.semantic_release.commit_parser_options]
minor_tags = ["feat"]
patch_tags = ["fix", "perf"]
other_allowed_tags = ["build", "chore", "ci", "docs", "style", "refactor", "test"]
allowed_tags = ["feat", "fix", "perf", "build", "chore", "ci", "docs", "style", "refactor", "test"]
default_bump_level = 0
parse_squash_commits = true
ignore_merge_commits = true

[tool.semantic_release.remote]
name = "origin"
type = "github"
ignore_token_for_push = false
insecure = false

[tool.semantic_release.publish]
dist_glob_patterns = ["dist/*"]

upload_to_vcs_release = true
