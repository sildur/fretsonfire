name: Continuous Delivery

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
  workflow_dispatch:

# default: least privileged permissions across all jobs
permissions:
  contents: read

jobs:
  tests:
    permissions:
      contents: read
      pull-requests: write
    runs-on: ubuntu-latest

    steps:
      - name: Setup | Checkout Repository
        uses: actions/checkout@v5

      - name: Setup | Python
        uses: actions/setup-python@v6
        with:
          python-version: '3.13'

      - name: Install | Project with test dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install '.[tests]'

      - name: Test | Run pytest
        run: python -m pytest

      - name: Setup | Install X virtual framebuffer
        run: |
          sudo apt-get update
          sudo apt-get install -y xvfb

      - name: Capture | Gameplay screenshot
        run: |
          xvfb-run --auto-servernum --server-args="-screen 0 1280x720x24" \
            python tools/capture_screenshot.py \
              --delay 5 \
              --output artifacts/gameplay.png \
              --preview-output artifacts/gameplay-preview.jpg \
              --preview-width 320

      - name: Upload | Gameplay screenshot
        id: upload_screenshot
        uses: actions/upload-artifact@v4
        with:
          name: gameplay-screenshot
          path: artifacts/gameplay.png
          if-no-files-found: error

      - name: Comment | Gameplay Screenshot
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const path = require('path');

            const previewPath = path.join(process.env.GITHUB_WORKSPACE, 'artifacts', 'gameplay-preview.jpg');
            if (!fs.existsSync(previewPath)) {
              core.warning(`Preview screenshot not found at ${previewPath}; skipping PR comment.`);
              return;
            }

            const marker = '<!-- gameplay-screenshot -->';
            const attachmentName = 'gameplay-preview.jpg';

            const { owner, repo } = context.repo;
            const issue_number = context.issue.number;

            const comments = await github.paginate(github.rest.issues.listComments, {
              owner,
              repo,
              issue_number,
              per_page: 100,
            });

            let comment = comments.find((entry) => entry.user?.type === 'Bot' && entry.body?.includes(marker));
            let createdNewComment = false;

            if (!comment) {
              const created = await github.rest.issues.createComment({
                owner,
                repo,
                issue_number,
                body: `${marker}\nUploading gameplay preview...`,
              });
              comment = created.data;
              createdNewComment = true;
            }

            if (!comment?.id) {
              core.warning('Unable to determine comment id for gameplay preview attachment.');
              return;
            }

            const token = process.env.GH_TOKEN || process.env.GITHUB_TOKEN;
            if (!token) {
              core.warning('GitHub token not available; skipping screenshot attachment.');
              return;
            }

            const fileContent = fs.readFileSync(previewPath);

            const apiUrl = process.env.GITHUB_API_URL || 'https://api.github.com';
            let uploadsBaseUrl = 'https://uploads.github.com';

            try {
              const parsed = new URL(apiUrl);
              if (parsed.hostname === 'api.github.com') {
                uploadsBaseUrl = 'https://uploads.github.com';
              } else if (parsed.pathname.endsWith('/api/v3')) {
                uploadsBaseUrl = `${parsed.origin}/api/uploads`;
              } else {
                uploadsBaseUrl = `${parsed.protocol}//${parsed.host}`;
              }
            } catch (error) {
              core.warning(`Unable to derive uploads base URL from ${apiUrl}: ${error}`);
            }

            let attachmentUrl;
            try {
              const normalizedBase = uploadsBaseUrl.replace(/\/$/, '');
              const uploadEndpoint = `${normalizedBase}/repos/${owner}/${repo}/issues/comments/${comment.id}/attachments`;

              const form = new FormData();
              form.append('name', attachmentName);
              const file = new File([fileContent], attachmentName, {
                type: 'image/jpeg',
              });
              form.append('file', file);

              const response = await fetch(uploadEndpoint, {
                method: 'POST',
                headers: {
                  Authorization: `Bearer ${token}`,
                  Accept: 'application/vnd.github+json',
                  'X-GitHub-Api-Version': '2022-11-28',
                },
                body: form,
              });

              if (!response.ok) {
                const detail = await response.text();
                throw new Error(`${response.status} ${response.statusText}${detail ? `: ${detail}` : ''}`);
              }

              const upload = await response.json();
              attachmentUrl = upload?.url;
            } catch (error) {
              if (createdNewComment) {
                await github.rest.issues.deleteComment({
                  owner,
                  repo,
                  comment_id: comment.id,
                });
              }
              core.warning(`Failed to upload gameplay preview attachment: ${error}`);
              return;
            }

            if (!attachmentUrl) {
              if (createdNewComment) {
                await github.rest.issues.deleteComment({
                  owner,
                  repo,
                  comment_id: comment.id,
                });
              }
              core.warning('Attachment upload did not return a URL; skipping screenshot comment.');
              return;
            }

            const body = [
              marker,
              '🕹️ **Gameplay Preview**',
              'Screenshot generated automatically by CI:',
              '',
              `![Gameplay screenshot](${attachmentUrl})`,
              '',
              'Full-resolution PNG is available as a workflow artifact.',
            ].join('\n');

            if (body.length >= 65000) {
              if (createdNewComment) {
                await github.rest.issues.deleteComment({
                  owner,
                  repo,
                  comment_id: comment.id,
                });
              }
              core.warning(`Preview comment body is ${body.length} characters; skipping to stay under GitHub limits.`);
              return;
            }

            await github.rest.issues.updateComment({
              owner,
              repo,
              comment_id: comment.id,
              body,
            });

  release:
    needs: tests
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    outputs:
      released: ${{ steps.release.outputs.released }}
      tag: ${{ steps.release.outputs.tag }}
    concurrency:
      group: ${{ github.workflow }}-release-${{ github.ref_name }}
      cancel-in-progress: false

    permissions:
      contents: write

    steps:
      # Note: We checkout the repository at the branch that triggered the workflow
      # with the entire history to ensure to match PSR's release branch detection
      # and history evaluation.
      # However, we forcefully reset the branch to the workflow sha because it is
      # possible that the branch was updated while the workflow was running. This
      # prevents accidentally releasing un-evaluated changes.
      - name: Setup | Checkout Repository on Release Branch
        uses: actions/checkout@v5
        with:
          ref: ${{ github.ref_name }}
          fetch-depth: 0

      - name: Setup | Force release branch to be at workflow sha
        run: |
          git reset --hard ${{ github.sha }}

      - name: Evaluate | Verify upstream has NOT changed
        # Last chance to abort before causing an error as another PR/push was applied to
        # the upstream branch while this workflow was running. This is important
        # because we are committing a version change (--commit). You may omit this step
        # if you have 'commit: false' in your configuration.
        #
        # You may consider moving this to a repo script and call it from this step instead
        # of writing it in-line.
        shell: bash
        run: |
          set +o pipefail

          UPSTREAM_BRANCH_NAME="$(git status -sb | head -n 1 | awk -F '\\.\\.\\.' '{print $2}' | cut -d ' ' -f1)"
          printf '%s\n' "Upstream branch name: $UPSTREAM_BRANCH_NAME"

          set -o pipefail

          if [ -z "$UPSTREAM_BRANCH_NAME" ]; then
              printf >&2 '%s\n' "::error::Unable to determine upstream branch name!"
              exit 1
          fi

          git fetch "${UPSTREAM_BRANCH_NAME%%/*}"

          if ! UPSTREAM_SHA="$(git rev-parse "$UPSTREAM_BRANCH_NAME")"; then
              printf >&2 '%s\n' "::error::Unable to determine upstream branch sha!"
              exit 1
          fi

          HEAD_SHA="$(git rev-parse HEAD)"

          if [ "$HEAD_SHA" != "$UPSTREAM_SHA" ]; then
              printf >&2 '%s\n' "[HEAD SHA] $HEAD_SHA != $UPSTREAM_SHA [UPSTREAM SHA]"
              printf >&2 '%s\n' "::error::Upstream has changed, aborting release..."
              exit 1
          fi

          printf '%s\n' "Verified upstream branch has not changed, continuing with release..."

      - name: Action | Semantic Version Release
        id: release
        # Adjust tag with desired version if applicable.
        uses: python-semantic-release/python-semantic-release@v10.4.1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          git_committer_name: "github-actions"
          git_committer_email: "actions@users.noreply.github.com"

      - name: Setup | Python
        if: steps.release.outputs.released == 'true'
        uses: actions/setup-python@v6
        with:
          python-version: '3.12'

      - name: Publish | Upload to GitHub Release Assets
        uses: python-semantic-release/publish-action@v10.4.1
        if: steps.release.outputs.released == 'true'
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ steps.release.outputs.tag }}

      - name: Upload | Distribution Artifacts
        if: steps.release.outputs.released == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: distribution-artifacts
          path: dist
          if-no-files-found: error

  package_desktop:
    needs: release
    if: ${{ needs.release.outputs.released == 'true' }}
    permissions:
      contents: write
    strategy:
      matrix:
        target: [Windows, macOS, Debian, Fedora, Flatpak]
        include:
          - target: Windows
            output-format: "app"
            runs-on: "windows-latest"
          - target: macOS
            routput-format: "app"
            runs-on: "macos-latest"
          - target: Debian
            platform: "Linux"
            output-format: "system"
            runs-on: "ubuntu-latest"
            pre-command: "sudo apt -y install socat"
            briefcase-run-prefix: "xvfb-run"
            briefcase-args: "--target debian"
          - target: Fedora
            platform: "Linux"
            output-format: "system"
            runs-on: "ubuntu-latest"
            pre-command: "sudo apt -y install socat"
            briefcase-run-prefix: "xvfb-run"
            briefcase-args: "--target fedora"
          - target: Flatpak
            platform: "Linux"
            output-format: "flatpak"
            runs-on: "ubuntu-latest"
            pre-command: |
              sudo apt -y update
              sudo apt -y install flatpak flatpak-builder
            briefcase-run-prefix: "xvfb-run"
            briefcase-args: ""
    runs-on: ${{ matrix.runs-on }}

    steps:
      - name: Setup | Checkout Release Tag
        uses: actions/checkout@v5
        with:
          ref: ${{ needs.release.outputs.tag }}
          fetch-depth: 0

      - name: Setup | Python
        uses: actions/setup-python@v6
        with:
          python-version: '3.12'

      - name: Setup | Install Briefcase
        shell: bash
        run: |
          python -m pip install -U pip setuptools wheel
          python -m pip install briefcase

      - name: Setup Environment
        run: |
          ${{ matrix.pre-command }}
      - name: Build | ${{ matrix.target }} package
        shell: bash
        run: |
          briefcase build \
            ${{ matrix.platform || matrix.target }} \
            ${{ matrix.output-format }} \
            --no-input --log \
            ${{ matrix.briefcase-args }}
      - name: Package | ${{ matrix.target }} package
        shell: bash
        run: |
          briefcase package \
            ${{ matrix.platform || matrix.target }} \
            ${{ matrix.output-format }} \
            --adhoc-sign --no-input --log \
            ${{ matrix.briefcase-args }}

      - name: Upload | Distribution Artifacts (${{ matrix.target }})
        uses: actions/upload-artifact@v4
        with:
          name: distribution-artifacts-${{ matrix.target }}
          path: dist
          if-no-files-found: error

  publish_desktop_assets:
    runs-on: ubuntu-latest
    needs:
      - release
      - package_desktop
    if: ${{ needs.release.outputs.released == 'true' }}
    permissions:
      contents: write

    steps:
      - name: Setup | Download Desktop Artifacts
        uses: actions/download-artifact@v5
        with:
          pattern: distribution-artifacts-*
          merge-multiple: true
          path: dist

      - name: Publish | Upload Desktop Assets to GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.release.outputs.tag }}
          files: dist/**/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  deploy:
    # 1. Separate out the deploy step from the publish step to run each step at
    #    the least amount of token privilege
    # 2. Also, deployments can fail, and its better to have a separate job if you need to retry
    #    and it won't require reversing the release.
    runs-on: ubuntu-latest
    needs: release
    if: ${{ needs.release.outputs.released == 'true' }}
    environment: pypi-release
    permissions:
      contents: read
      id-token: write

    steps:
      - name: Setup | Download Build Artifacts
        uses: actions/download-artifact@v5
        id: artifact-download
        with:
          name: distribution-artifacts
          path: dist

      - name: Prepare | Filter Python distributions
        run: |
          find dist -type f ! -name "*.whl" ! -name "*.tar.gz" -print -delete

      # ------------------------------------------------------------------- #
      # Python Semantic Release is not responsible for publishing your      #
      # python artifacts to PyPI. Use the official PyPA publish action      #
      # instead. The following steps are an example but is not guaranteed   #
      # to work as the action is not maintained by the                      #
      # python-semantic-release team.                                       #
      # ------------------------------------------------------------------- #

      # see https://docs.pypi.org/trusted-publishers/
      - name: Publish package distributions to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist
          print-hash: true
          verbose: true
